version: 0.2

env:
  variables:
    SHELL: /bin/bash
    AWS_DEFAULT_REGION: eu-central-1
    APACHE_BASE_PATH: main
    ALTI_URL: //service-alti.dev.bgdi.ch
    API_URL: //mf-chsdi3.dev.bgdi.ch
    SHOP_URL: //shop-bgdi.dev.bgdi.ch
    DBHOST: 10.220.6.188
    DBPORT: 5432
    DBSTAGING: dev
    DEPLOY_TARGET: dev
    GEODATA_STAGING: test
    GEOADMIN_FILE_STORAGE_BUCKET: mf-chsdi3-geoadmin-file-storage-bucket
    GEOADMIN_FILE_STORAGE_TABLE: mf_chsdi3_geoadmin_file_storage
    GEOADMINHOST: mf-geoadmin3.dev.bgdi.ch
    HOST: mf-chsdi3.dev.bgdi.ch
    KEEP_VERSION: false
    WMTS_PUBLIC_HOST: tod.dev.bgdi.ch
    MODWSGI_CONFIG: production.ini
    PUBLIC_BUCKET_HOST: public.dev.bgdi.ch
    ROBOTS_FILE: robots.txt
    SERVER_PORT: 6543
    SPHINXHOST: 10.220.4.177 
    VECTOR_BUCKET: bgdi-grid-based-data
    WMSHOST: wms-bgdi.dev.bgdi.ch
    WSGI_PROCESSES: 1
    WSGI_THREADS: 15
    CMSGEOADMINHOST: https://cms.geo.admin.ch
    LINKEDDATAHOST: https://ld.geo.admin.ch
    CACHE_CONTROL: no-cache
    SHORTENER_TABLE_NAME: mf_chsdi3_shorturl
    SHORTENER_TABLE_REGION: eu-central-1

    # The all important USE_PYTHON3 variable is set by the AWS CodeBuild project
    # We do not have AWS S3 and DynmoDB access for now
  parameter-store:
    OPENTRANS_API_KEY: "/opentrans_api/key"
    PGUSER: "/postgresql/pguser"
    PGPASSWORD: "/postgresql/pgpassword"

phases:
  install:
    runtime-versions:
      docker: 18
    commands:
      - |-
           if [ "${USE_PYTHON3}" = 0 ]; then
             echo "Installing python 2.7"
             apt-get update && apt-get install -y python2.7 python2.7-dev virtualenv build-essential
           fi

  pre_build:
    commands:
      - echo Configuring stuff...
      - aws --version
      - exec /bin/bash
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - GITHUB_BRANCH=${CODEBUILD_WEBHOOK_HEAD_REF#refs/heads/*}
      - TODAY=$(date '+%Y%m%d')
      - IMAGE_TAG=r_${TODAY}_${COMMIT_HASH}
      - COMPOSE_PROJECT_NAME=${IMAGE_TAG}
      - |-
           if [ "${CODEBUILD_WEBHOOK_TRIGGER}" = pr/* ]; then
             PULL_REQUEST=${CODEBUILD_WEBHOOK_TRIGGER#pr/*}
           fi
      - |-
           if [ "${GIT_BRANCH}" != master  ]; then
               LATEST=${GITHUB_BRANCH:-staging}
           else
               LATEST=latest
           fi
      - echo "=========== VERSIONS ============="
      - python --version
      - python2 --version
      - python3 --version
      - bash --version
      - echo "=========== VARIABLES ============="
      - echo CODEBUILD_RESOLVED_SOURCE_VERSION=${CODEBUILD_RESOLVED_SOURCE_VERSION}
      - echo CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}
      - echo CODEBUILD_WEBHOOK_BASE_REF=${CODEBUILD_WEBHOOK_BASE_REF}
      - echo CODEBUILD_WEBHOOK_HEAD_REF=${CODEBUILD_WEBHOOK_HEAD_REF=}
      - echo CODEBUILD_WEBHOOK_TRIGGER=${CODEBUILD_WEBHOOK_TRIGGER}
      - echo CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}
      - echo CODEBUILD_BUILD_ID=${CODEBUILD_BUILD_ID}
      - echo CODEBUILD_SOURCE_REPO_URL=${CODEBUILD_SOURCE_REPO_URL}
      - echo COMMIT_HASH=${COMMIT_HASH}
      - echo PULL_REQUEST=${PULL_REQUEST}
      - echo GITHUB_BRANCH=${GITHUB_BRANCH}
      - echo IMAGE_TAG=${IMAGE_TAG}
      - echo BASH=${BASH}
      - echo SHELL=${SHELL}
      - echo USE_PYTHON3=${USE_PYTHON3}
      - echo "===========POSGRESQL========================"
      - python ./scripts/pg_ready.py
      - ./scripts/pg-isready -db "dbname=kogis_${DBSTAGING} host=${DBHOST} user=${PGUSER} password=${PGPASSWORD} port=${DBPORT}"
      - hostname -I
      - echo "============================================"
  build:
    commands:
      - echo Build started on $(date)
      - |-
           if [ "${USE_PYTHON3}" = 0 ]; then
             make cleanall dev
           else
              make cleanall build/python dev
           fi
      - echo Build completed on $(date)
      - echo "===========SPHINXSEARCH===================="
      - .venv/bin/python ./scripts/test_sphinxserver.py
      - echo "==========================================="
      
  post_build:
    commands:
      - echo Testing...
      - make lint
      - echo "==========Running functional tests=============="
      - .venv/bin/nosetests   tests/functional/
      - echo "==========Running integration tests=============="
      - .venv/bin/nosetests tests/integration/test_admin.py
      - .venv/bin/nosetests tests/integration/test_cache_update.py
      - .venv/bin/nosetests tests/integration/test_catalog.py
      - .venv/bin/nosetests tests/integration/test_checker.py
      - .venv/bin/nosetests tests/integration/test_color.py
      - .venv/bin/nosetests tests/integration/test_doc.py
      - .venv/bin/nosetests tests/integration/test_features_service.py
      - .venv/bin/nosetests tests/integration/test_file_storage.py
      - .venv/bin/nosetests tests/integration/test_glstyles_storage.py
      - .venv/bin/nosetests tests/integration/test_historicalmaps.py
      - .venv/bin/nosetests tests/integration/test_identify_service.py
      - # .venv/bin/nosetests tests/integration/test_layers.py
      - .venv/bin/nosetests tests/integration/test_layers_service.py
      - .venv/bin/nosetests tests/integration/test_loader.py
      - .venv/bin/nosetests tests/integration/test_luftbilder.py
      - .venv/bin/nosetests tests/integration/test_opentransapi.py
      - .venv/bin/nosetests tests/integration/test_qrcode.py
      -  .venv/bin/nosetests tests/integration/test_search.py
      - .venv/bin/nosetests tests/integration/test_shortener.py
      - .venv/bin/nosetests tests/integration/test_sitemap.py
      - .venv/bin/nosetests tests/integration/test_sphinxapi.py
      - .venv/bin/nosetests tests/integration/test_stationboard.py
      - .venv/bin/nosetests tests/integration/test_topics.py
      - .venv/bin/nosetests tests/integration/test_translation.py
      - .venv/bin/nosetests tests/integration/test_wmtscapabilities.py
      - echo "Great success"
