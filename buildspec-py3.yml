#
# Only for python3 and docker
#
version: 0.2

env:
  variables:
    SHELL: /bin/bash
    AWS_DEFAULT_REGION: eu-central-1
    SERVICE_NAME: "mf-chsdi3"
    DOCKER_REGISTRY: "974517877189.dkr.ecr.eu-central-1.amazonaws.com"
    USER: "aws_code_build"
    DYNAMODB_TESTS: 0
    S3_TESTS: 0
    BUILD_TARGET: dev
    GIT_TAG: undefined
    # Copied from prod.env
    ALTI_URL: //service-alti.prod.bgdi.ch
    APACHE_BASE_PATH: main
    APACHE_ENTRY_PATH: 
    APACHE_LOG_LEVEL: warn
    APACHE_PORT: 8009
    API_URL: //api3.geo.admin.ch
    AWS_DEFAULT_REGION: eu-central-1
    CACHE_CONTROL: no-cache
    CMSGEOADMINHOST: https://cms.geo.admin.ch
    DATAGEOADMINHOST: data.geo.admin.ch
    DBHOST: pg-sandbox.bgdi.ch
    DBPORT: 5432
    DBSTAGING: prod
    DEPLOY_TARGET: prod
    DYNAMIC_TRANSLATION: 1
    GEOADMIN_FILE_STORAGE_BUCKET: public-prod-bgdi-ch
    GEOADMIN_FILE_STORAGE_TABLE_NAME: geoadmin-file-storage
    GEOADMIN_FILE_STORAGE_TABLE_NAME: mf_chsdi3_geoadmin_file_storage
    GEOADMIN_FILE_STORAGE_TABLE_REGION: eu-central-1
    GEOADMINHOST: map.geo.admin.ch
    GEODATA_STAGING: prod
    GLSTYLES_STORAGE_BUCKET: public-prod-bgdi-ch
    GLSTYLES_STORAGE_TABLE_NAME: vectortiles-styles-storage
    GLSTYLES_STORAGE_TABLE_REGION: eu-central-1
    HOST: api3.geo.admin.ch
    HTTP_PROXY: http://ec2-52-28-118-239.eu-central-1.compute.amazonaws.com:80
    KEEP_VERSION: false
    KML_TEMP_DIR: /var/local/print/kml
    LINKEDDATAHOST: https://ld.geo.admin.ch
    MODWSGI_CONFIG: production.ini
    MODWSGI_USER: www-data
    PUBLIC_BUCKET_HOST: public.geo.admin.ch
    ROBOTS_FILE: robots_prod.txt
    SERVER_PORT: 6543
    SHOP_URL: //shop.swisstopo.admin.ch
    SHORTENER_ALLOWED_DOMAINS: admin.ch,swisstopo.ch,bgdi.ch
    SHORTENER_ALLOWED_HOSTS: admin.ch,swisstopo.ch,bgdi.ch
    SHORTENER_TABLE_NAME: shorturl
    SHORTENER_TABLE_REGION: eu-central-1
    SPHINXHOST: service-sphinxsearch.prod.bgdi.ch
    SYSTEM_PYTHON_CMD: python3
    VECTOR_BUCKET: mf-chsdi3-bgdi-grid-based-data
    WMSHOST: wms.geo.admin.ch
    WMTS_PUBLIC_HOST: wmts.geo.admin.ch
    WSGI_APP: /var/www/vhosts/mf-chsdi3/private/chsdi/apache/application.wsgi
    WSGI_PROCESSES: 1
    WSGI_THREADS: 15
    # The all important USE_PYTHON3 variable is set by the AWS CodeBuild project
    # We do not have AWS S3 and DynmoDB access for now
  parameter-store:
    OPENTRANS_API_KEY: "/opentrans_api/key"
    PGUSER: "/postgresql/pguser"
    PGPASSWORD: "/postgresql/pgpassword"

phases:
  install:
    runtime-versions:
      python: 3.7
    commands:
      - aws --version

  pre_build:
    commands:
      - echo Configuring stuff...
      - aws --version
      - exec /bin/bash
      - echo "Login to AWS ECR docker registry"
      - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - GITHUB_BRANCH=${CODEBUILD_WEBHOOK_HEAD_REF#refs/heads/*}
      - TODAY=$(date '+%Y%m%d')
      - IMAGE_TAG=r_${TODAY}_${COMMIT_HASH}
      - COMPOSE_PROJECT_NAME=${IMAGE_TAG}
      - |-
           if [ "${CODEBUILD_WEBHOOK_TRIGGER}" = pr/* ]; then
             PULL_REQUEST=${CODEBUILD_WEBHOOK_TRIGGER#pr/*}
           fi
      - |-
           if [ "${GIT_BRANCH}" != master  ]; then
               LATEST=${GITHUB_BRANCH:-staging}
           else
               LATEST=latest
           fi
      - echo "=========== VERSIONS ============="
      - python --version
      - python2 --version
      - python3 --version
      - which python3
      - node --version
      - bash --version
      - echo "=========== VARIABLES ============="
      - echo CODEBUILD_RESOLVED_SOURCE_VERSION=${CODEBUILD_RESOLVED_SOURCE_VERSION}
      - echo CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}
      - echo CODEBUILD_WEBHOOK_BASE_REF=${CODEBUILD_WEBHOOK_BASE_REF}
      - echo CODEBUILD_WEBHOOK_HEAD_REF=${CODEBUILD_WEBHOOK_HEAD_REF=}
      - echo CODEBUILD_WEBHOOK_TRIGGER=${CODEBUILD_WEBHOOK_TRIGGER}
      - echo CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}
      - echo CODEBUILD_BUILD_ID=${CODEBUILD_BUILD_ID}
      - echo CODEBUILD_SOURCE_REPO_URL=${CODEBUILD_SOURCE_REPO_URL}
      - echo COMMIT_HASH=${COMMIT_HASH}
      - echo PULL_REQUEST=${PULL_REQUEST}
      - echo GITHUB_BRANCH=${GITHUB_BRANCH}
      - echo IMAGE_TAG=${IMAGE_TAG}
      - echo BASH=${BASH}
      - echo SHELL=${SHELL}
      - echo CURRENT_DIRECTORY=$(pwd)
      - echo USE_PYTHON3=${USE_PYTHON3}
      - echo "===========POSGRESQL========================"
      - python ./scripts/pg_ready.py
      - hostname -I
      - make help
      - echo "==================================="
  build:
    commands:
      - echo Build started on $(date)
      - make cleanall all
      - |-
        if [ "${GIT_TAG}" = "undefined"  ] ; then
          DOCKER_IMG_TAG="${DOCKER_REGISTRY}/${SERVICE_NAME}:${GITHUB_BRANCH}.${COMMIT_HASH}"
        else
          DOCKER_IMG_TAG="${DOCKER_REGISTRY}/${SERVICE_NAME}:${GIT_TAG}"
        fi
      - export DOCKER_IMG_TAG=${DOCKER_IMG_TAG}
      - export DOCKER_IMG_TAG_LATEST="${DOCKER_REGISTRY}/${SERVICE_NAME}:${GITHUB_BRANCH}.latest"
      #- export $(cat dev.env) && docker build -t swisstopo/mf-chsdi3:python3.7  .
      - echo "Building docker image with tags ${DOCKER_IMG_TAG} and ${DOCKER_IMG_TAG_LATEST}"
      - >
          docker build
          --build-arg GIT_HASH="${COMMIT_HASH}"
          --build-arg GIT_BRANCH="${GITHUB_BRANCH}"
          --build-arg AUTHOR="CI"
          --build-arg VERSION="${GIT_TAG}"
          -t "${DOCKER_IMG_TAG}" -t "${DOCKER_IMG_TAG_LATEST}" .
      - echo Build completed on $(date)
      - make templates
      - docker-compose up -d
      - DOCKER_CONTAINER_ID=$(docker ps -aq)
      - docker logs ${DOCKER_CONTAINER_ID}
      - echo "===========SPHINXSEARCH===================="
      - .venv/bin/python ./scripts/test_sphinxserver.py
      - echo "==========================================="

  post_build:
    commands:
      - echo "========== Running tests =============="
      - make templates lint testci
      - echo "========== Starting container =============="
      - docker-compose up -d
      - DOCKER_CONTAINER_ID=$(docker ps -aq --filter status="running" --filter ancestor="${DOCKER_IMG_TAG_LATEST}") && if [ -z "$DOCKER_CONTAINER_ID"  ]; then exit 1; fi
      - echo "DOCKER_CONTAINER_ID=${DOCKER_CONTAINER_ID}"
      - echo "=========== Running test within the running container ================"
      - docker exec -i "$DOCKER_CONTAINER_ID"   .venv/bin/nosetests  tests/functional
      - curl -s localhost:${APACHE_PORT}/rest/services/api/MapServer | jq -r '.layers[].layerBodId'
      - echo "=========== Pushing image to repository ==========="
      - docker push ${DOCKER_IMG_TAG}
      - docker push ${DOCKER_IMG_TAG_LATEST}
      - echo "Done"

reports:
  reportGroupJunit:
    files:
      - 'junit-reports/**/*'
    file-format: JunitXml
