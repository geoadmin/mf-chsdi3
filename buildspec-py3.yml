#
# Only for python3 and docker
#
version: 0.2

env:
  shell: bash
  variables:
    SHELL: /bin/bash
    AWS_DEFAULT_REGION: eu-central-1
    SERVICE_NAME: "mf-chsdi3"
    DOCKER_REGISTRY: "974517877189.dkr.ecr.eu-central-1.amazonaws.com"
    USER: "aws_code_build"
    APACHE_BASE_PATH: main
    APACHE_PORT: 8009
    ALTI_URL: //service-alti.dev.bgdi.ch
    API_URL: //mf-chsdi3.dev.bgdi.ch
    SHOP_URL: //shop-bgdi.dev.bgdi.ch
    DBHOST: pg.bgdi.ch
    DBPORT: 5432
    DBSTAGING: dev
    DEPLOY_TARGET: dev
    GEODATA_STAGING: test
    GEOADMIN_FILE_STORAGE_BUCKET: mf-chsdi3-geoadmin-file-storage-bucket
    GEOADMIN_FILE_STORAGE_TABLE_NAME: mf_chsdi3_geoadmin_file_storage
    GEOADMIN_FILE_STORAGE_TABLE_REGION: eu-central-1
    GLSTYLES_STORAGE_TABLE_NAME: mf-chsdi3-vectortiles-styles-storage
    GLSTYLES_STORAGE_TABLE_REGION: eu-central-1
    GEOADMINHOST: mf-geoadmin3.dev.bgdi.ch
    HOST: mf-chsdi3.dev.bgdi.ch
    KEEP_VERSION: false
    WMTS_PUBLIC_HOST: tod.dev.bgdi.ch
    MODWSGI_CONFIG: production.ini
    PUBLIC_BUCKET_HOST: public.dev.bgdi.ch
    ROBOTS_FILE: robots.txt
    RANCHER_LABEL: dev
    SERVER_PORT: 6543
    SPHINXHOST: service-sphinxsearch.dev.bgdi.ch
    VECTOR_BUCKET: mf-chsdi3-bgdi-grid-based-data
    WMSHOST: wms-bgdi.dev.bgdi.ch
    WSGI_PROCESSES: 1
    WSGI_THREADS: 15
    CMSGEOADMINHOST: https://cms.geo.admin.ch
    LINKEDDATAHOST: https://ld.geo.admin.ch
    CACHE_CONTROL: no-cache
    SHORTENER_TABLE_NAME: mf_chsdi3_shorturl
    SHORTENER_TABLE_REGION: eu-central-1
    SYSTEM_PYTHON_CMD: python3
    BUILD_TARGET: dev
    # Disable some tests
    DYNAMODB_TESTS: 0
    S3_TESTS: 0
    CI_QUIET: 1
    # The all important USE_PYTHON3 variable is set by the AWS CodeBuild project
    # We do not have AWS S3 and DynmoDB access for now
  parameter-store:
    OPENTRANS_API_KEY: "/opentrans_api/key"
    PGUSER: "/postgresql/pguser"
    PGPASSWORD: "/postgresql/pgpassword"

phases:
  install:
    runtime-versions:
      python: 3.7
    commands:
      - echo "Login to AWS ECR docker registry"
      - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}


  pre_build:
    commands:
      - echo "=========== Configuring stuff ====="
      - export PULL_REQUEST=${CODEBUILD_WEBHOOK_TRIGGER#pr/*}
      - export GIT_BRANCH="${CODEBUILD_WEBHOOK_HEAD_REF#refs/heads/}"
      - export GIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - export GIT_TAG="$(git describe --tags || echo 'unknown')"
      - export GIT_DIRTY="$(git status --porcelain)"
      - |-
        if [ "${GIT_TAG}" = "unknown"  ] ; then
          DOCKER_IMG_TAG="${DOCKER_REGISTRY}/${SERVICE_NAME}:${GIT_BRANCH//\//_}.${GIT_HASH}"
        else
          DOCKER_IMG_TAG="${DOCKER_REGISTRY}/${SERVICE_NAME}:${GIT_TAG}"
        fi
      - export DOCKER_IMG_TAG=${DOCKER_IMG_TAG}
      - export DOCKER_IMG_TAG_LATEST="${DOCKER_REGISTRY}/${SERVICE_NAME}:${GIT_BRANCH//\//_}.latest"
      - echo "=========== VERSIONS =============="
      - aws --version
      - python --version
      - python3 --version
      - which python3
      - node --version
      - bash --version
      - echo "=========== VARIABLES ============="
      - echo CODEBUILD_RESOLVED_SOURCE_VERSION=${CODEBUILD_RESOLVED_SOURCE_VERSION}
      - echo CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}
      - echo CODEBUILD_WEBHOOK_BASE_REF=${CODEBUILD_WEBHOOK_BASE_REF}
      - echo CODEBUILD_WEBHOOK_HEAD_REF=${CODEBUILD_WEBHOOK_HEAD_REF=}
      - echo CODEBUILD_WEBHOOK_TRIGGER=${CODEBUILD_WEBHOOK_TRIGGER}
      - echo CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}
      - echo CODEBUILD_BUILD_ID=${CODEBUILD_BUILD_ID}
      - echo CODEBUILD_SOURCE_REPO_URL=${CODEBUILD_SOURCE_REPO_URL}
      - echo PULL_REQUEST=${PULL_REQUEST}
      - echo GIT_BRANCH=${GIT_BRANCH}
      - echo GIT_HASH=${GIT_HASH}
      - echo GIT_TAG=${GIT_TAG}
      - echo GIT_DIRTY=${GIT_DIRTY}
      - echo DOCKER_IMG_TAG=${DOCKER_IMG_TAG}
      - echo DOCKER_IMG_TAG_LATEST=${DOCKER_IMG_TAG_LATEST}
      - echo BASH=${BASH}
      - echo SHELL=${SHELL}
      - echo CURRENT_DIRECTORY=$(pwd)
      - echo USE_PYTHON3=${USE_PYTHON3}
      - echo "=========== POSGRESQL ============="
      - python ./scripts/pg_ready.py
      - echo "host=$(hostname -I)"
      - make help
      - echo "=========== PREPARE ==============="
      - make cleanall
      - make all
  build:
    commands:
      - echo "=========== BUILD ================="
      - echo Build started on $(date)
      - >
        docker build
        --build-arg GIT_HASH="${GIT_HASH}"
        --build-arg GIT_BRANCH="${GIT_BRANCH}"
        --build-arg GIT_DIRTY="${GIT_DIRTY}"
        --build-arg AUTHOR="CI"
        --build-arg VERSION="${GIT_TAG}"
        -t "${DOCKER_IMG_TAG}" -t "${DOCKER_IMG_TAG_LATEST}" .
      - echo Build completed on $(date)
      - echo "=========== SPHINXSEARCH =========="
      - .venv/bin/python ./scripts/test_sphinxserver.py
      - echo "=========== Linting ==============="
      - make lint
      - echo "=========== Running tests ========="
      - make testci

  post_build:
    commands:
      - echo "=========== Pushing image ========="
      - docker push ${DOCKER_IMG_TAG}
      - docker push ${DOCKER_IMG_TAG_LATEST}
      - echo "Done"

reports:
  reportGroupJunit:
    files:
      - 'junit-reports/**/*'
    file-format: JunitXml
